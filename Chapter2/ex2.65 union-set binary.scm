; Exercise 2.65

(define (intercestion-set set1 set2)
    (define (intersection-list list1 list2)
        (if (or (null? list1) (null? list2))
            '()
            (let ((x1 (car list1))
                  (x2 (car list2)))
                (cond ((= x1 x2)
                        (intersection-list (cdr list1) (cdr list2)))
                      ((< x1 x2)
                        (intersection-list (cdr list1) list2))
                      ((< x2 x1)
                        (intersection-list list1 (cdr list2)))
                      )))
    )
    (list->tree (intersection-list (tree->list-2 set1) (tree->list-2 set2))))

(define (union-set set1 set2)
    (define (union-list list1 list2)
        (cond ((and (null? list1) (null? list2)) '())
              ((null? list1) list2)
              ((null? list2) list1)
              (else (let ((x1 (car list1)) (x2 (car list2)))
                  (cond ((= x1 x2)
                            (cons x1 (union-list (cdr list1)
                                                 (cdr list2))))
                        ((< x1 x2)
                            (cons x1 (union-list (cdr list1) list2)))
                        ((< x2 x1)
                            (cons x2 (union-list list1 (cdr list2)))))))))
    (list->tree (union-list (tree->list-2 set1) (tree->list-2 set2))))


(union-set '() '())
(union-set '() (list->tree '(1 2 3 4)))
(union-set '(2 3 4) '())
(union-set (list->tree '(2 3 4)) (list->tree '(1 2 34)))

(intercestion-set '() '(1 2 3 4))
(intercestion-set '(2 3 4) '())
(intercestion-set '(2 3 4) '(1 2 34))